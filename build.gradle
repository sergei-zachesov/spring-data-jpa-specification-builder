import com.github.spotbugs.snom.Effort

plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs' version '6.4.4'
    id "dev.yumi.gradle.licenser" version "2.1.1"
    id "com.github.ben-manes.versions" version "0.53.0"
}

group = 'io.github.szachesov'
version = '1.0.0'

repositories {
    mavenCentral()
}

ext {
    springVersion = '3.5.6'
    lombokVersion = '1.18.42'
    testcontainersVersion = '1.21.3'
    hibernateVersion = '7.1.4.Final'
}

dependencies {

    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springVersion}"
    implementation 'org.jspecify:jspecify:1.0.0'

    implementation "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"

    testRuntimeOnly "org.junit.platform:junit-platform-launcher:6.0.0"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springVersion}"
    testImplementation "org.springframework.boot:spring-boot-testcontainers:${springVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testRuntimeOnly 'org.postgresql:postgresql:42.7.8'
    testCompileOnly "org.hibernate.orm:hibernate-jpamodelgen:${hibernateVersion}"
    testAnnotationProcessor "org.hibernate.orm:hibernate-jpamodelgen:${hibernateVersion}"
}

test {
    useJUnitPlatform()
    //https://stackoverflow.com/a/78188896/17965846
    jvmArgs("-XX:+EnableDynamicAgentLoading")
    dependsOn checkstyleMain, checkstyleTest
}

checkstyle {
    toolVersion = '11.0.1'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0

    configProperties = [
            'configDirectory': rootDir.toString() + "/config/checkstyle"
    ]
}
checkstyleMain {
    source = 'src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}

license {
    rule(file("LICENSE-HEADER"))
    include("**/*.java")
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    checkForGradleUpdate = true
    gradleReleaseChannel = "current"
    checkConstraints = true
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

pmd {
    toolVersion = "7.17.0"
    consoleOutput = true
    ruleSetFiles = files("${rootDir}/config/pmd/pmd.xml")
    ruleSets = []
}

spotbugs {
    showProgress = true
    effort = Effort.MAX
    reportLevel = 'low' //Confidence.LOW - Access to 'LOW' exceeds its access rights
    excludeFilter = file("${rootDir}/config/spotbugs/exclude.xml")
}


